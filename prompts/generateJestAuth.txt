I want you to create a function that will authenticate the user, called `getAuthToken`, and return the token needed to pass the authentication. With that token, I will make API requests and send it in the HTML headers like this:
```javascript
const response = await axios.post(url, reqBody, {
  headers: {
    "Content-Type": "application/json",
    "Authorization": authToken,
    'x-auth-token': authToken,
    'Cookie': cookie
  },
});
```

getAuthToken function needs to do multiple things. Let's break it down step by step:
1. insert the user in the database
2. make an API request to the login route
3. get the authentication token from the response
4. return authentication token

The data from which you need to create getAuthToken is:
1. Mongo queries made during the execution of the login endpoint
```json
{{{loginMongoQueriesArray}}}
```

Here are the details about the parameters of objects inside the array of mongo queries:
`preQueryDocs` - mongo documents that were in the database before the query was made
`postQueryDocs` - mongo documents that were in the database after the query was made
`mongoResponse` - a response that Mongo returned
`mongoQuery` - a query object for finding documents in the database
`mongoOptions` - options for the mongo query
`mongoOperation` - mongo operation (eg. "find", "insert", etc.)
`db` - the database on which the query is being made
`collection` - the collection on which the query is being made

`preQueryDocs` and `postQueryDocs` are important so that you can test if an update in the database happened correctly so make sure to include in the test a check to see if the database was correctly updated. Also, since Mongo's `ObjectId` is not a valid JSON value, you might see a string like this - "ObjectId(\"642548c3dabd5517e39b5827\")". Keep in mind that this should be converted to `new ObjectId("642548c3dabd5517e39b5827")` and if you need to initiate ObjectId, you can require it from "mongodb" - like this:
```javascript
const { ObjectId } = require("mongodb");
let someObjectId = new ObjectId(id);
```

2. The login URL endpoint path is `{{{loginEndpointPath}}}`

3. Data that's sent in the request body during the login is:
```json
{{{loginRequestBody}}}
```

You have to always require `cookie` and `axios`. Here is a template for the getAuthToken function:
```javascript
const cookie = require('cookie');
const axios = require('axios');
const getMongoCollection = global.getMongoCollection;

async function getAuthToken(appUrl, userDoc) {
    let response;
    try {
        const User = getMongoCollection(<USER_COLLECTION>);
        <SET_DEFAULT_USER>
        <REPLACE_USERDOC_PASSWORD_WITH_DEFAULTUSEROBJ_PASSWORD>
        if (!userDoc) userDoc = defaultUserObj;

        const existingUser = await User.findOne({ <FIELD_TO_FIND_USER> });
        if (!existingUser) {
            await User.insertOne(userDoc);
        } else {
            await User.updateOne({email: userDoc.email}, {$set: {<SET_PASSWORD_TO_USERDOC_PASSWORD>}});
        }

        response = await axios.post(appUrl + <LOGIN_ENDPOINT_PATH>, <LOGIN_BODY>)
            .catch(error => {
                return {Authorization: 'Bearer invalid-token'};
            });

        const token = response.data.token || response.headers['authorization'];

        return token ? { 'Authorization': 'Bearer ' + token.replace('Bearer ', ''), 'x-auth-token': token } : { 'Cookie': 'token=' + cookie.parse(response.headers['set-cookie'][0]).token }
    } catch (err) {
        return {};
    }
}
```
In section <REPLACE_USERDOC_PASSWORD_WITH_DEFAULTUSEROBJ_PASSWORD> you should replace password from userDoc with defaultUser password so that login can always pass. Here is example, that should work in most cases, how to do that. Modify this example only if password is in other object key eg. userDoc.pass
```javascript
if (userDoc) userDoc.password = defaultUserObj.password;
```

<LOGIN_BODY> should always have same password as one I provided you as data that's sent in the request body during the login.

Input variables are:
1. appUrl - the URL of the app
2. userDoc - mongo document of the user that needs to be logged in for a specific test. Each test can require a different user to log in for the test to be successful. getAuthToken function needs to take that document and, before it inserts the document into the database, replace the password field with the password value captured in the data above so that we're always able to log the user in with the same password. If `userDoc` is undefined or invalid, you should use default userDoc which was provided above as `Mongo queries made during the execution of the login endpoint` you just have to find which is user document.

When replacing <LOGIN_BODY> do not hardcode anything but use `userDoc`.

Don't require `global` because that is the native NodeJS global variable.

You need to basically create this exact same function but replace all places with `<SOME_VARIABLE>` and add all the requires at the top but make sure that you don't require any variable that you won't use in the function. For example:
```javascript
const somePackage = require('...');
const someOtherPackage = require('...');

async function getAuthToken() {
...
}
module.exports = getAuthToken;
```
